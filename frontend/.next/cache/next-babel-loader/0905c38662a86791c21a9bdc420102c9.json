{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeEvery, call, put, delay } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_IN_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\"; // const HELLO_SAGA = \"HELLO_SAGA\";\n\nfunction loginAPI() {\n  return axios.post('/login'); // 서버에 요청을 보내는 부분\n}\n\nfunction signUpAPI() {}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(2000);\n\n        case 3:\n          throw new Error('에러');\n\n        case 6:\n          _context2.next = 13;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context2.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n          _context5.next = 4;\n          return all([fork(watchSignUp)]);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/changhwanoh/practice/js/React/NodeBird/frontend/sagas/user.js"],"names":["login","signUp","watchLogin","watchSignUp","userSaga","all","fork","takeEvery","call","put","delay","axios","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_IN_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","loginAPI","post","signUpAPI","type","console","error","Error"],"mappings":";;;;yBAmBUA,K;;;yBAcAC,M;;;yBAgBAC,U;;;yBAIAC,W;;;yBAIeC,Q;;AAzDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACCC,cADD,EAECC,cAFD,EAGCC,cAHD,EAICC,eAJD,EAKCC,eALD,EAMCC,eAND,QAOO,kBAPP,C,CASA;;AAEA,SAASC,QAAT,GAAoB;AACnB,SAAOP,KAAK,CAACQ,IAAN,CAAW,QAAX,CAAP,CADmB,CACQ;AAC3B;;AACD,SAASC,SAAT,GAAqB,CACpB;;AAED,SAAUpB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMU,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA;AAIE,iBAAMD,GAAG,CAAC;AACTY,YAAAA,IAAI,EAAEP;AADG,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQEQ,UAAAA,OAAO,CAACC,KAAR;AARF;AASE,iBAAMd,GAAG,CAAC;AACTY,YAAAA,IAAI,EAAER;AADG,WAAD,CAAT;;AATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMS,KAAK,CAAC,IAAD,CAAX;;AAHF;AAAA,gBAIQ,IAAIc,KAAJ,CAAU,IAAV,CAJR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASEF,UAAAA,OAAO,CAACC,KAAR;AATF;AAUE,iBAAMd,GAAG,CAAC;AACTY,YAAAA,IAAI,EAAEJ,eADG;AAETM,YAAAA,KAAK;AAFI,WAAD,CAAT;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUrB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMK,SAAS,CAACK,cAAD,EAAiBZ,KAAjB,CAAf;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMI,SAAS,CAACQ,eAAD,EAAkBd,MAAlB,CAAf;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,UAAD,CAAL,CAAD,CAAT;;AADc;AAAA;AAEd,iBAAMG,GAAG,CAAC,CAACC,IAAI,CAACH,WAAD,CAAL,CAAD,CAAT;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeEvery, call, put, delay } from \"redux-saga/effects\";\nimport axios from 'axios'\nimport {\n\tLOG_IN_REQUEST,\n\tLOG_IN_FAILURE,\n\tLOG_IN_SUCCESS,\n\tSIGN_UP_REQUEST,\n\tSIGN_UP_SUCCESS,\n\tSIGN_UP_FAILURE,\n} from \"../reducers/user\";\n\n// const HELLO_SAGA = \"HELLO_SAGA\";\n\nfunction loginAPI() {\n\treturn axios.post('/login')// 서버에 요청을 보내는 부분\n}\nfunction signUpAPI() {\n}\n\nfunction* login() {\n\ttry {\n\t\t// yield call(loginAPI);\n\t\tyield delay(2000)\n\t\tyield put({\n\t\t\ttype: LOG_IN_SUCCESS\n\t\t});\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\tyield put({\n\t\t\ttype: LOG_IN_FAILURE\n\t\t});\n\t} \n}\nfunction* signUp(){\n\ttry {\n\t\t// yield call(signUpAPI);\n\t\tyield delay(2000);\n\t\tthrow new Error('에러');\n\t\tyield put({\n\t\t\ttype: SIGN_UP_SUCCESS\n\t\t})\n\t} catch (e) {\n\t\tconsole.error(e)\n\t\tyield put({\n\t\t\ttype: SIGN_UP_FAILURE,\n\t\t\terror: e\n\t\t})\n\t}\n}\nfunction* watchLogin() {\n\tyield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp() {\n\tyield takeEvery(SIGN_UP_REQUEST, signUp)\n}\n\nexport default function* userSaga() {\n\tyield all([fork(watchLogin)]);\n\tyield all([fork(watchSignUp)])\n}\n"]},"metadata":{},"sourceType":"module"}